<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--(c) Copyright 2008, VersionOne, Inc. All rights reserved. (c)-->

<project name="JavaSDK">
    <property environment="env"/>
    <property file="build.properties.${env.COMPUTERNAME}"/>
    <property file="build.properties"/>

    <property name="ver.major" value="12"/>
    <property name="ver.minor" value="0"/>
    <property name="ver.build" value="${build.number}"/>
    <property name="build.version" value="${ver.major}.${ver.minor}.${ver.build}"/>

    <property name="lib.dir" value="jars"/>
    <property name="src.dir" value="src"/>
    <property name="output.dir" value="bin"/>
    <property name="junit.output.dir" value="junit"/>
    <property name="publish.dir" value="\\files\Builds\VersionOne.SDK\Java\${build.number}"/>
    <property name="common.dir" value="Common"/>
    <property name="doc.dir" value="doc"/>
    <property name="dist.dir" value="dist"/>

    <property name="coverage.dir" value="coverage"/>
    <property name="coverage.classes" value="${coverage.dir}/classes"/>
    <property name="coverage.junit" value="${coverage.dir}/junit"/>
    <property name="coverage.file" value="cobertura.ser"/>

    <property name="APIClientJar.filename"     value="VersionOne.APIClient.jar"/>
    <property name="APIClientTestJar.filename" value="VersionOne.APIClient.Tests.jar"/>
    <property name="OMJar.filename"            value="VersionOne.ObjectModel.jar"/>
    <property name="OMTestJar.filename"        value="VersionOne.ObjectMode.Tests.jar"/>

	<property name="test.instance.name" value="V1JavaSDKTests" />

    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.5"/>
    <property name="source" value="1.5"/>

	<!--
    <path id="library.classpath">
        <pathelement location="${lib.dir}/junit-4.4.jar"/>
        <pathelement location="${lib.dir}/jmock-2.4.0.jar"/>
        <pathelement location="${lib.dir}/log4j-1.2.9.jar"/>
        <pathelement location="${lib.dir}/fitnesse.jar"/>
        <pathelement location="${lib.dir}/cglib-nodep-2.1_3.jar.jar"/>
        <pathelement location="${lib.dir}/objenesis-1.0.jar"/>
        <pathelement location="${lib.dir}/hamcrest-library-1.1.jar"/>
    </path>
	-->
	
    <path id="build.classpath">
        <pathelement location="${output.dir}"/>
        <path refid="library.classpath"/>
    </path>
	
    <path id="coverage.classpath">
        <pathelement location="${coverage.classes}"/>
        <pathelement location="${output.dir}"/>
        <!--
    	<fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
        -->
    </path>

    <target name="init">
        <mkdir dir="${output.dir}"/>
        <mkdir dir="${junit.output.dir}"/>
        <copy includeemptydirs="false" todir="${output.dir}">
            <fileset dir="${src.dir}" excludes="**/*.launch, **/*.java"/>
        </copy>
    </target>

    <!-- 
        Clean -->
    <target name="clean">
        <delete dir="." includes="*.jar"/>
        <delete dir="." includes="*.zip"/>
        <delete dir="." includes="cobertura.ser"/>
        <delete dir="." includes="License.rtf"/>
        <delete dir="${output.dir}"/>
        <delete dir="${junit.output.dir}"/>
        <delete dir="${coverage.dir}"/>
        <delete dir="${doc.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>

    <!-- 
        Build -->
    <target name="build" depends="init">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}"
            destdir="${output.dir}" source="${source}" memorymaximumsize="${compiler.max.memory}"
            target="${target}" encoding="UTF-8">
            <src path="${src.dir}"/>
            <classpath refid="build.classpath"/>
        </javac>
    </target>

    <!--  
        Jar -->
    <target name="jar" depends="apiclient.jar, object.model.jar" description="Create jar files"/>

    <target name="apiclient.jar" description="Create APIClient and APIClientTests jar files">
        <jar jarfile="${APIClientJar.filename}">
            <fileset dir="${output.dir}"
                excludes="**/tests/**, **/om/**, **/fitnesse/**, **/util/V1Util.class"/>
            <manifest>
                <attribute name="BuiltBy" value="VersionOne"/>
                <attribute name="BuildVersion" value="${build.version}"/>
                <attribute name="BuildRev" value="${ver.build}"/>
            </manifest>
        </jar>
        <jar jarfile="${APIClientTestJar.filename}" includes="**/tests/**, **/fitnesse/**"
            excludes="**/om/**" basedir="${output.dir}">
            <manifest>
                <attribute name="BuiltBy" value="VersionOne"/>
                <attribute name="BuildVersion" value="${build.version}"/>
                <attribute name="BuildRev" value="${ver.build}"/>
            </manifest>
        </jar>
    </target>

    <target name="object.model.jar" description="Create ObjectModel and ObjectModelTests jar files">
        <jar jarfile="${OMJar.filename}">
            <fileset dir="${output.dir}" includes="**/om/**, **/util/V1Util.class"
                excludes="**/tests/**"/>
            <manifest>
                <attribute name="BuiltBy" value="VersionOne"/>
                <attribute name="BuildVersion" value="${build.version}"/>
                <attribute name="BuildRev" value="${ver.build}"/>
            </manifest>
        </jar>
        <jar jarfile="${OMTestJar.filename}" includes="**/om/tests/**" basedir="${output.dir}">
            <manifest>
                <attribute name="BuiltBy" value="VersionOne"/>
                <attribute name="BuildVersion" value="${build.version}"/>
                <attribute name="BuildRev" value="${ver.build}"/>
            </manifest>
        </jar>
    </target>

    <!-- 
        Test -->
    <target name="test" depends="AllAPIClientTests"/>

    <target name="AllAPIClientTests">
        <junit fork="yes" haltonfailure="false" printsummary="withOutAndErr" showoutput="true"> 
            <sysproperty key="test.websiteurl" value="${test.websiteurl}"/>
            <formatter type="xml"/>
            <classpath refid="build.classpath"/>
            <batchtest fork="yes" todir="${junit.output.dir}">
                <fileset dir="${output.dir}">
                    <include name="**/*Tester.class"/>
                    <exclude name="**/BaseSDKTester.class"/>
                    <exclude name="**/DataExamplesTester.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <!-- Coverage -->
	<!--
    <taskdef classpath="${lib.dir}/cobertura.jar" resource="tasks.properties">
        <classpath>
            <fileset dir="${lib.dir}">
                <include name="**/*.jar"/>
            </fileset>
        </classpath>
    </taskdef>
	-->
	
    <target name="coverage.init">
        <mkdir dir="${coverage.classes}"/>
        <mkdir dir="${coverage.junit}"/>
    </target>

    <target name="coverage.clean">
        <delete dir="${coverage.dir}"/>
        <delete file="${coverage.file}"/>
    </target>

    <target name="coverage" depends="coverage.clean, coverage.init">
        <cobertura-instrument todir="${coverage.classes}" datafile="${coverage.file}">
            <fileset dir="${output.dir}">
                <include name="**/*.class"/>
                <exclude name="com/versionone/apiclient/example/**/*.class"/>
                <exclude name="com/versionone/apiclient/fitnesse/**/*.class"/>
                <exclude name="**/*Tester.class"/>
                <exclude name="**/*Tester$*.class"/>
                <exclude name="**/*TesterBase.class"/>
                <exclude name="**/*TestSuite.class"/>
                <exclude name="**/ListAssert*.class"/>
                <exclude name="**/Mock*.class"/>
                <exclude name="**/RandomStream*.class"/>
                <exclude name="**/TestTransform*.class"/>
            </fileset>
        </cobertura-instrument>

        <junit fork="yes" haltonfailure="false" printsummary="withOutAndErr" showoutput="true"> 
            <sysproperty key="net.sourceforge.cobertura.datafile" file="${coverage.file}"/>
            <sysproperty key="test.websiteurl" value="${test.websiteurl}"/>
            <formatter type="xml"/>
            <classpath refid="coverage.classpath"/>
            <batchtest fork="yes" todir="${junit.output.dir}">
                <fileset dir="${output.dir}">
                    <include name="**/*Tester.class"/>
                    <exclude name="**/BaseSDKTester.class"/>
                    <exclude name="**/DataExamplesTester.class"/>
                </fileset>
            </batchtest>
        </junit>

        <cobertura-report datafile="${coverage.file}" destdir="${coverage.dir}/html">
            <fileset dir="${src.dir}" includes="**/*"/>
        </cobertura-report>
        <cobertura-report datafile="${coverage.file}" format="xml" destdir="${coverage.dir}">
            <fileset dir="${src.dir}" includes="**/*"/>
        </cobertura-report>
        <move file="${coverage.dir}/coverage.xml" tofile="${coverage.dir}/coverage.raw"/>
        <xslt destdir="${coverage.dir}" style="stripDTD.xsl" in="${coverage.dir}/coverage.raw"
            out="${coverage.dir}/coverage.xml"/>
			
		<antcall  target="uninstallv1" />
    </target>

    <!-- Uninstall existing instance -->
    <target name="uninstallv1" description="Uninstall the V1 test instance">
        <echo message="Uninstall instance..."/>
		<echo message="${v1ultimate.setup.exe} -DeleteDatabase -Quiet:2 -u ${test.instance.name}"/>
        <exec executable="${v1ultimate.setup.exe}">
            <arg line="-DeleteDatabase -Quiet:2 -u ${test.instance.name}"/>
        </exec>
        <echo message="Uninstall completed"/>
    </target>

    <!--
        Begin Documentation
    -->
    <macrodef name="gendoc.content.base">
        <attribute name="filename"/>
        <attribute name="collect.xref.targets"/>
        <attribute name="content.doc.output.dir" default="${doc.dir}/@{filename}"/>
        <sequential>
            <mkdir dir="@{content.doc.output.dir}"/>
            <exec dir="${doc.source.dir}" executable="${common.dir}/docbook/xsltproc/xsltproc.exe"
                failonerror="true">
                <arg
                    line="-o ../@{content.doc.output.dir}/@{filename}.html --stringparam current.docid ${filename} --stringparam target.database.document olinkdb.xml --stringparam collect.xref.targets ${collect.xref.targets} --stringparam targets.filename ${filename}.db Common/v1integration.xsl @{filename}/@{filename}.xml"
                />
            </exec>
        </sequential>
    </macrodef>

    <target name="doc" depends="doc.api, doc.om, doc.userGuide"/>

    <target name="doc.clean">
        <delete dir="${doc.dir}"/>
    </target>

    <target name="doc.api">
        <property name="api.doc" value="${doc.dir}/api"/>
        <delete dir="${api.doc}"/>
        <mkdir dir="${api.doc}"/>
        <javadoc destdir="${api.doc}" author="false" version="true" use="false"
            windowtitle="VersionOne APIClient">
            <fileset dir="${src.dir}">
                <include name="com/versionone/*"/>
                <include name="com/versionone/util/*"/>
                <include name="com/versionone/apiclient/*"/>
                <exclude name="com/versionone/util/Test*.*"/>
                <exclude name="com/versionone/apiclient/MimeType.properties"/>
            </fileset>
        </javadoc>
    </target>

    <target name="doc.om">
        <property name="om.doc" value="${doc.dir}/om"/>
        <delete dir="${om.doc}"/>
        <mkdir dir="${om.doc}"/>
        <javadoc destdir="${om.doc}" author="false" version="true" use="false"
            windowtitle="VersionOne Object Model Library">
            <fileset dir="${src.dir}">
                <include name="com/versionone/om/*"/>
                <exclude name="com/versionone/util/Test*.*"/>
                <exclude name="com/versionone/om/entities.properties"/>
            </fileset>
        </javadoc>
    </target>

    <target name="doc.userGuide">
        <property name="doc.source.dir" value="DocSource"/>

        <delete dir="${doc.dir}/Common"/>
        <mkdir dir="${doc.dir}/Common"/>
        <copy file="${doc.source.dir}/Common/v1integration.css" todir="${doc.dir}/Common"/>
		<copy file="${doc.source.dir}\SDKComponents.gif" todir="${doc.dir}"/>

        <!-- this is the index file -->
        <exec dir="${doc.source.dir}" executable="${common.dir}/docbook/xsltproc/xsltproc.exe"
            failonerror="true">
            <arg line="-o ../${doc.dir}/APIClient.index.html Common/index.xsl index.xml"/>
        </exec>

        <gendoc.content.base filename="APIClient" collect.xref.targets="only"/>
        <gendoc.content.base filename="APIClient" collect.xref.targets="no"/>
		
        <gendoc.content.base filename="ObjectModel" collect.xref.targets="only"/>
        <gendoc.content.base filename="ObjectModel" collect.xref.targets="no"/>
		
        <copy includeemptydirs="false" todir="${doc.dir}\ObjectModel">
            <fileset dir="${doc.source.dir}\ObjectModel" excludes="**/*.xml"/>
        </copy>		
    </target>

    <!-- 
        Package  
    -->
    <target name="package"
        depends="package.init, doc.clean, doc, package.dist, copyright, package.source">
        <mkdir dir="${publish.dir}"/>
        <copy file="${dist.filename}" todir="${publish.dir}"/>
        <copy file="${source.dist}" todir="${publish.dir}"/>
    </target>

    <target name="package.init">
        <delete dir="${dist.dir}"/>
        <property name="dist.filename" value="VersionOne.JavaSDK-${build.version}.zip"/>
        <property name="source.dist" value="VersionOne.JavaSDK.Source-${build.version}.zip"/>
    </target>

    <target name="copyright" unless="skip.copyright">
        <exec executable="${common.dir}/Tools/HeaderWriter.exe"/>
    </target>

    <target name="package.source" depends="package.init">
        <copy file="Common/V1LicenseDoc/License.rtf" todir="${basedir}"/>
        <copy file="Common/Data/V1SDKTests.bak" todir="${basedir}/TestSqlData"/>
        <copy file="Common/Data/InstallVersionOneForTests.bat" todir="${basedir}/TestSqlData"/>
        <zip destfile="${source.dist}" basedir="${basedir}"
            includes="src/**/*, **/*.xml, *.xsl, *.rtf, **/V1SDKTests.bak, **/InstallVersionOneForTests.bat"
            excludes="DocSource\**\*, build_log.xml, fitresults.xml, junit\**\*, coverage\**\*, Common\**\*"
        />
	<delete dir="${basedir}/TestSqlData"/>
    </target>

    <target name="package.dist" depends="package.init">
        <move file="${APIClientJar.filename}" todir="${dist.dir}"/>
        <move file="${OMJar.filename}" todir="${dist.dir}"/>

        <copy file="Common/V1LicenseDoc/License.rtf" todir="${dist.dir}"/>
        <move todir="${dist.dir}/doc">
            <fileset dir="${doc.dir}"/>
        </move>
        <delete file="APIClient*.zip"/>
        <zip destfile="${dist.filename}" basedir="${dist.dir}"/>
    </target>
</project>
